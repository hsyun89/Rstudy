tail(apart_code_final)
mapo_map<-get_googlemap("mapogu",maptype = "roadmap",zoom = 12)
ggmap(mapo_map)
library("ggplot2")
library(ggplot2)
ggmap(mapo_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(label="역명",vjust=-1))
ggmap(mapo_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(label=역명명,vjust=-1))
ggmap(mapo_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(label=역명,vjust=-1))
hongdae_map<-get_googlemap("hongdae station",maptype = "roadmap",zoom=15)
ggmap(hongdae_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(labe=역명,vjust=-1))+
geom_point(data=station_code_final,aes(x=lon,y=lat))+
geom_text(data=station_code_final,aes(labe=단지명,vjust=-1))+
geom_text(data=station_code_final,aes(labe=거래금액,vjust=-1))
ggmap(hongdae_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(label=역명,vjust=-1))+
geom_point(data=station_code_final,aes(x=lon,y=lat))+
geom_text(data=station_code_final,aes(label=단지명,vjust=-1))+
geom_text(data=station_code_final,aes(label=거래금액,vjust=-1))
station_code_final
mapo_map<-get_googlemap("mapogu",maptype = "roadmap",zoom = 12)
ggmap(mapo_map)
library(ggplot2)
ggmap(mapo_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(label=역명,vjust=-1))
hongdae_map<-get_googlemap("hongdae station",maptype = "roadmap",zoom=15)
ggmap(hongdae_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(label=역명,vjust=-1))+
geom_point(data=station_code_final,aes(x=lon,y=lat))+
geom_text(data=station_code_final,aes(label=단지명,vjust=-1))+
geom_text(data=station_code_final,aes(label=거래금액,vjust=-1))
ggmap(hongdae_map)
ggmap(hongdae_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(label=역명,vjust=-1))+
geom_point(data=apart_code_final,aes(x=lon,y=lat))+
geom_text(data=apart_code_final,aes(label=단지명,vjust=-1))+
geom_text(data=apart_code_final,aes(label=거래금액,vjust=-1))
ggmap(hongdae_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(label=역명,vjust=-1))+
geom_point(data=apart_code_final,aes(x=lon,y=lat))+
geom_text(data=apart_code_final,aes(label=단지명,vjust=-1))+
geom_text(data=apart_code_final,aes(label=거래금액,vjust=-1))
ggmap(hongdae_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(label=역명,vjust=-1))+
geom_point(data=apart_code_final,aes(x=lon,y=lat))+
geom_text(data=apart_code_final,aes(label=단지명,vjust=-1))+
geom_text(data=apart_code_final,aes(label=거래금액,vjust=1))
hongdae_map<-get_googlemap("gangnam",maptype = "roadmap",zoom=15)
ggmap(hongdae_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(label=역명,vjust=-1))+
geom_point(data=apart_code_final,aes(x=lon,y=lat))+
geom_text(data=apart_code_final,aes(label=단지명,vjust=-1))+
geom_text(data=apart_code_final,aes(label=거래금액,vjust=1))
hongdae_map<-get_googlemap("seoul",maptype = "roadmap",zoom=15)
ggmap(hongdae_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(label=역명,vjust=-1))+
geom_point(data=apart_code_final,aes(x=lon,y=lat))+
geom_text(data=apart_code_final,aes(label=단지명,vjust=-1))+
geom_text(data=apart_code_final,aes(label=거래금액,vjust=1))
hongdae_map<-get_googlemap("seoul",maptype = "roadmap",zoom=11)
ggmap(hongdae_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(label=역명,vjust=-1))+
geom_point(data=apart_code_final,aes(x=lon,y=lat))+
geom_text(data=apart_code_final,aes(label=단지명,vjust=-1))+
geom_text(data=apart_code_final,aes(label=거래금액,vjust=1))
hongdae_map<-get_googlemap("gangnam",maptype = "roadmap",zoom=11)
ggmap(hongdae_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(label=역명,vjust=-1))+
geom_point(data=apart_code_final,aes(x=lon,y=lat))+
geom_text(data=apart_code_final,aes(label=단지명,vjust=-1))+
geom_text(data=apart_code_final,aes(label=거래금액,vjust=1))
hongdae_map<-get_googlemap("gangnam",maptype = "roadmap",zoom=14)
ggmap(hongdae_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(label=역명,vjust=-1))+
geom_point(data=apart_code_final,aes(x=lon,y=lat))+
geom_text(data=apart_code_final,aes(label=단지명,vjust=-1))+
geom_text(data=apart_code_final,aes(label=거래금액,vjust=1))
hongdae_map<-get_googlemap("gangnam",maptype = "roadmap",zoom=13)
ggmap(hongdae_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(label=역명,vjust=-1))+
geom_point(data=apart_code_final,aes(x=lon,y=lat))+
geom_text(data=apart_code_final,aes(label=단지명,vjust=-1))+
geom_text(data=apart_code_final,aes(label=거래금액,vjust=1))
hongdae_map<-get_googlemap("hongdae station",maptype = "roadmap",zoom=15)
ggmap(hongdae_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(label=역명,vjust=-1))+
geom_point(data=apart_code_final,aes(x=lon,y=lat))+
geom_text(data=apart_code_final,aes(label=단지명,vjust=-1))+
geom_text(data=apart_code_final,aes(label=거래금액,vjust=1))
hongdae_map<-get_googlemap("hongdae station",maptype = "roadmap",zoom=15)
ggmap(hongdae_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(label=역명,vjust=-1))+
geom_point(data=apart_code_final,aes(x=lon,y=lat))+
geom_text(data=apart_code_final,aes(label=단지명,vjust=-1))+
geom_text(data=apart_code_final,aes(label=거래금액,vjust=1))
library(wordcloud2)
wordcloud2(word_table,fontFamily = "맑은 고딕",size=5,color="random-light",backgroundColor="balck")
wordcloud2(word_table,fontFamily = "맑은 고딕",size=5,color="random-light",backgroundColor="balck")
wordcloud2(word_table,fontFamily = "맑은 고딕",size=5,color="random-light",backgroundColor="balck")
wordcloud2(word_table,fontFamily = "맑은 고딕",size=5,color="random-light",backgroundColor="balck")
ggmap(hongdae_map)+
geom_point(data=station_code_final,aes(x=lon,y=lat),colour="red",size=3)+
geom_text(data=station_code_final,aes(label=역명,vjust=-1))+
geom_point(data=apart_code_final,aes(x=lon,y=lat))+
geom_text(data=apart_code_final,aes(label=단지명,vjust=-1))+
geom_text(data=apart_code_final,aes(label=거래금액,vjust=1))
#tm 패키지
install.packages("tm")
library(tm)
lunch <- c("커피 파스타 치킨 샐러드 아이스크림",
"커피 우동 소고기김밥 귤",
"참치김밥 커피 오뎅",
"샐러드 피자 파스타 콜라",
"티라무슈 햄버거 콜라",
"파스타 샐러드 커피"
)
cps <- VCorpus(VectorSource(lunch))
tdm <- TermDocumentMatrix(cps)
tdm
cps <- VCorpus(VectorSource(lunch))
tdm <- TermDocumentMatrix(cps,
control=list(wordLengths = c(1, Inf)))
tdm
(m <- as.matrix(tdm))
rowSums(m)
colSums(m)
com <- m %*% t(m)
com
lunch <- c("커피 파스타 치킨 샐러드 아이스크림",
"커피 우동 소고기김밥 귤",
"참치김밥 커피 오뎅",
"샐러드 피자 파스타 콜라",
"티라무슈 햄버거 콜라",
"파스타 샐러드 커피"
)
cps <- VCorpus(VectorSource(lunch))
tdm <- TermDocumentMatrix(cps)
tdm
as.matrix(tdm)
cps <- VCorpus(VectorSource(lunch))
tdm <- TermDocumentMatrix(cps,
control=list(wordLengths = c(1, Inf)))
tdm
(m <- as.matrix(tdm))
rowSums(m)
colSums(m)
com <- m %*% t(m)
com
install.packages("qgraph")
library(qgraph)
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*800))
install.packages("proxy")
library(proxy)
dd <- NULL
d1 <- c("aaa bbb ccc")
d2 <- c("aaa bbb ddd")
d3 <- c("aaa bbb ccc")
d4 <- c("xxx yyy zzz")
dd <- c(d1, d2, d3, d4)
cps <- Corpus(VectorSource(dd))
dtm <- DocumentTermMatrix(cps)
as.matrix(dtm)
inspect(dtm)
m <- as.matrix(dtm)
com <- m %*% t(m)
dist(com, method = "cosine")
dist(com, method = "Euclidean")
cps <- Corpus(VectorSource(dd))
cps
dtm <- DocumentTermMatrix(cps)
as.matrix(dtm)
inspect(dtm)
dd <- c(d1, d2, d3, d4)
dd
cps <- Corpus(VectorSource(dd))
cps
dtm <- DocumentTermMatrix(cps)
as.matrix(dtm)
inspect(dtm)
m <- as.matrix(dtm)
com <- m %*% t(m)
com
dist(com, method = "cosine")
dist(com, method = "Euclidean")
dd <- NULL
duke<-c("사과","포도","망고")
dooly<-c("포도","자몽","자두")
ddochi<-c("복숭아","사과","포도")
donat<-c("오렌지","바나나","복숭아")
gildong<-c("포도","바나나","망고")
heedong<-c("포도","귤","오렌지")
dd<-c(duke,dooly,ddochi,donat,gildong,heedong)
cps <- Corpus(VectorSource(dd))
dtm <- DocumentTermMatrix(cps)
dtm
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
as.matrix(dtm)
inspect(dtm)
m <- as.matrix(dtm)
com <- m %*% t(m)
com
m
dd <- NULL
duke<-c("사과","포도","망고")
dooly<-c("포도","자몽","자두")
ddochi<-c("복숭아","사과","포도")
donat<-c("오렌지","바나나","복숭아")
gildong<-c("포도","바나나","망고")
heedong<-c("포도","귤","오렌지")
dd<-c(duke,dooly,ddochi,donat,gildong,heedong)
dd
cps <- Corpus(VectorSource(dd))
dtm <- DocumentTermMatrix(cps)
as.matrix(dtm)
Encoding(dtm)<-'UTF-8'
dtm
lunch <- c("커피 파스타 치킨 샐러드 아이스크림",
"커피 우동 소고기김밥 귤",
"참치김밥 커피 오뎅",
"샐러드 피자 파스타 콜라",
"티라무슈 햄버거 콜라",
"파스타 샐러드 커피"
)
cps <- VCorpus(VectorSource(lunch))
tdm <- TermDocumentMatrix(cps)
tdm
as.matrix(tdm)
dd <- NULL
duke<-c("사과","포도","망고")
dooly<-c("포도","자몽","자두")
ddochi<-c("복숭아","사과","포도")
donat<-c("오렌지","바나나","복숭아")
gildong<-c("포도","바나나","망고")
heedong<-c("포도","귤","오렌지")
dd<-c(duke,dooly,ddochi,donat,gildong,heedong)
cps <- VCorpus(VectorSource(dd))
dtm <- DocumentTermMatrix(cps)
as.matrix(dtm)
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps, control=list(wordLengths = c(1, Inf)))
as.matrix(dtm)
dd <- NULL
duke<-c("사과","포도","망고")
dooly<-c("포도","자몽","자두")
ddochi<-c("복숭아","사과","포도")
donat<-c("오렌지","바나나","복숭아")
gildong<-c("포도","바나나","망고")
heedong<-c("포도","귤","오렌지")
dd<-c(duke,dooly,ddochi,donat,gildong,heedong)
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps, control=list(wordLengths = c(1, Inf)))
as.matrix(dtm)
dd <- NULL
duke<-c("사과","포도","망고")
dooly<-c("포도","자몽","자두")
ddochi<-c("복숭아","사과","포도")
donat<-c("오렌지","바나나","복숭아")
gildong<-c("포도","바나나","망고")
heedong<-c("포도","귤","오렌지")
dd<-c(duke,dooly,ddochi,donat,gildong,heedong)
cps <- VCorpus(VectorSource(dd))
cps
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps, control=list(wordLengths = c(1, Inf)))
as.matrix(dtm)
tdm <- TermDocumentMatrix(cps,control=list(wordLengths = c(1, Inf)))
as.matrix(dtm)
dd <- NULL
duke<-c("사과","포도","망고")
dooly<-c("포도","자몽","자두")
ddochi<-c("복숭아","사과","포도")
donat<-c("오렌지","바나나","복숭아")
gildong<-c("포도","바나나","망고")
heedong<-c("포도","귤","오렌지")
dd<-c(duke,dooly,ddochi,donat,gildong,heedong)
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps,control=list(wordLengths = c(1, Inf)))
as.matrix(dtm)
inspect(dtm)
m <- as.matrix(dtm)
com <- m %*% t(m)
dist(com, method = "cosine")
lunch <- c("커피 파스타 치킨 샐러드 아이스크림",
"커피 우동 소고기김밥 귤",
"참치김밥 커피 오뎅",
"샐러드 피자 파스타 콜라",
"티라무슈 햄버거 콜라",
"파스타 샐러드 커피"
)
cps <- VCorpus(VectorSource(lunch))
tdm <- TermDocumentMatrix(cps)
tdm
as.matrix(tdm)
cps <- VCorpus(VectorSource(lunch))
tdm <- TermDocumentMatrix(cps,
control=list(wordLengths = c(1, Inf)))
tdm
(m <- as.matrix(tdm))
dd <- NULL
duke<-c("사과","포도","망고")
dooly<-c("포도","자몽","자두")
ddochi<-c("복숭아","사과","포도")
donat<-c("오렌지","바나나","복숭아")
gildong<-c("포도","바나나","망고")
heedong<-c("포도","귤","오렌지")
dd<-c(duke,dooly,ddochi,donat,gildong,heedong)
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps,
control=list(wordLengths = c(1, Inf)))
tdm
(m <- as.matrix(tdm))
dist(com, method = "cosine")
dist(com, method = "Euclidean")
com
(m <- as.matrix(tdm))
dd <- NULL
duke<-c("사과","포도","망고")
dooly<-c("포도","자몽","자두")
ddochi<-c("복숭아","사과","포도")
donat<-c("오렌지","바나나","복숭아")
gildong<-c("포도","바나나","망고")
heedong<-c("포도","귤","오렌지")
dd<-c(duke,dooly,ddochi,donat,gildong,heedong)
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps,control=list(wordLengths = c(1, Inf)))
tdm
(m <- as.matrix(tdm))
lunch <- c("커피 파스타 치킨 샐러드 아이스크림",
"커피 우동 소고기김밥 귤",
"참치김밥 커피 오뎅",
"샐러드 피자 파스타 콜라",
"티라무슈 햄버거 콜라",
"파스타 샐러드 커피"
)
cps <- VCorpus(VectorSource(lunch))
tdm <- TermDocumentMatrix(cps)
tdm
cps <- VCorpus(VectorSource(lunch))
tdm <- TermDocumentMatrix(cps,
control=list(wordLengths = c(1, Inf)))
tdm
(m <- as.matrix(tdm))
rowSums(m)
dd <- NULL
duke<-c("사과","포도","망고")
dooly<-c("포도","자몽","자두")
ddochi<-c("복숭아","사과","포도")
donat<-c("오렌지","바나나","복숭아")
gildong<-c("포도","바나나","망고")
heedong<-c("포도","귤","오렌지")
dd<-c(duke,dooly,ddochi,donat,gildong,heedong)
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps,control=list(wordLengths = c(1, Inf)))
tdm
(m <- as.matrix(tdm))
dd
dd<-c("duke"=duke,dooly,ddochi,donat,gildong,heedong)
dd
dd<-c("duke"=duke,"dooly"=dooly,ddochi,donat,gildong,heedong)
dd <- NULL
dd<-c("duke"=duke,"dooly"=dooly,ddochi,donat,gildong,heedong)
dd
dd<-cbind.data.frame(duke,dooly)
dd
dd<-cbind.data.frame(duke,dooly,ddochi,donat,gildong,heedong)
dd <- NULL
dd<-cbind.data.frame(duke,dooly,ddochi,donat,gildong,heedong)
dd
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps,control=list(wordLengths = c(1, Inf)))
tdm
(m <- as.matrix(tdm))
rowsum(m)
rowSums(m)
#문제2 - 가장 많이 선택된 과일
rowSums(m) %>% arrange()
arrange(rowSums(m))
tdm
#문제2 - 가장 많이 선택된 과일
rowSums(m)
View(rowSums(m))
arrange(rowSums(m)$V1)
#문제2 - 가장 많이 선택된 과일
tmp<-rowSums(m)
tmp
tmp %>% arrange(tmp)
tmp
sort(tmp)
sort(tmp) %>% head(1)
sort(tmp,desc()) %>% head(1)
sort(tmp,decreasing = T) %>% head(1)
#문제3 - 가장 적게 선택된 과일
sort(tmp) %>% head(1)
#문제2 - 가장 많이 선택된 과일
tmp<-rowSums(m)
tmp
#문제1 - 좋아하는 과일이 가장 유사한 친구들
com <- m %*% t(m)
com
dd <- NULL
d1 <- c("aaa bbb ccc")
d2 <- c("aaa bbb ddd")
d3 <- c("aaa bbb ccc")
d4 <- c("xxx yyy zzz")
dd <- c(d1, d2, d3, d4)
cps <- Corpus(VectorSource(dd))
dtm <- DocumentTermMatrix(cps)
as.matrix(dtm)
inspect(dtm)
m <- as.matrix(dtm)
m
com <- m %*% t(m)
com
dd <- NULL
d1 <- c("aaa bbb ccc")
d2 <- c("aaa bbb ddd")
d3 <- c("aaa bbb ccc")
d4 <- c("xxx yyy zzz")
dd <- c(d1, d2, d3, d4)
cps <- Corpus(VectorSource(dd))
dtm <- DocumentTermMatrix(cps)
as.matrix(dtm)
inspect(dtm)
m <- as.matrix(dtm)
m
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps,control=list(wordLengths = c(1, Inf)))
(m <- as.matrix(tdm))
dd <- NULL
duke<-c("사과","포도","망고")
dooly<-c("포도","자몽","자두")
ddochi<-c("복숭아","사과","포도")
donat<-c("오렌지","바나나","복숭아")
gildong<-c("포도","바나나","망고")
heedong<-c("포도","귤","오렌지")
dd<-cbind.data.frame(duke,dooly,ddochi,donat,gildong,heedong)
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps,control=list(wordLengths = c(1, Inf)))
(m <- as.matrix(tdm))
dd <- NULL
duke<-c("사과","포도","망고")
dooly<-c("포도","자몽","자두")
ddochi<-c("복숭아","사과","포도")
donat<-c("오렌지","바나나","복숭아")
gildong<-c("포도","바나나","망고")
heedong<-c("포도","귤","오렌지")
dd<-cbind.data.frame(duke,dooly,ddochi,donat,gildong,heedong)
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps,control=list(wordLengths = c(1, Inf)))
(m <- as.matrix(tdm))
#문제1 - 좋아하는 과일이 가장 유사한 친구들
com <- m %*% t(m)
com
dd <- NULL
duke<-c("사과","포도","망고")
dooly<-c("포도","자몽","자두")
ddochi<-c("복숭아","사과","포도")
donat<-c("오렌지","바나나","복숭아")
gildong<-c("포도","바나나","망고")
heedong<-c("포도","귤","오렌지")
dd<-cbind.data.frame(duke,dooly,ddochi,donat,gildong,heedong)
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps,control=list(wordLengths = c(1, Inf)))
(m <- as.matrix(tdm))
#문제1 - 좋아하는 과일이 가장 유사한 친구들
com <- m %*% m
com
#문제1 - 좋아하는 과일이 가장 유사한 친구들
com <- c(m) %*% m
com
dd <- NULL
duke<-c("사과","포도","망고")
dooly<-c("포도","자몽","자두")
ddochi<-c("복숭아","사과","포도")
donat<-c("오렌지","바나나","복숭아")
gildong<-c("포도","바나나","망고")
heedong<-c("포도","귤","오렌지")
dd<-cbind.data.frame(duke,dooly,ddochi,donat,gildong,heedong)
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps,control=list(wordLengths = c(1, Inf)))
(m <- as.matrix(tdm))
#문제1 - 좋아하는 과일이 가장 유사한 친구들
com <- t(m) %*% m
com
dist(com, method = "cosine")
tmp<-rowSums(m)
sort(tmp,decreasing = T) %>% head(1)
#문제3 - 가장 적게 선택된 과일
sort(tmp) %>% head(1)
