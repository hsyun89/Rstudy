cps <- VCorpus(VectorSource(lunch))
tdm <- TermDocumentMatrix(cps)
tdm
cps <- VCorpus(VectorSource(lunch))
tdm <- TermDocumentMatrix(cps,
control=list(wordLengths = c(1, Inf)))
tdm
(m <- as.matrix(tdm))
rowSums(m)
dd <- NULL
duke<-c("사과","포도","망고")
dooly<-c("포도","자몽","자두")
ddochi<-c("복숭아","사과","포도")
donat<-c("오렌지","바나나","복숭아")
gildong<-c("포도","바나나","망고")
heedong<-c("포도","귤","오렌지")
dd<-c(duke,dooly,ddochi,donat,gildong,heedong)
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps,control=list(wordLengths = c(1, Inf)))
tdm
(m <- as.matrix(tdm))
dd
dd<-c("duke"=duke,dooly,ddochi,donat,gildong,heedong)
dd
dd<-c("duke"=duke,"dooly"=dooly,ddochi,donat,gildong,heedong)
dd <- NULL
dd<-c("duke"=duke,"dooly"=dooly,ddochi,donat,gildong,heedong)
dd
dd<-cbind.data.frame(duke,dooly)
dd
dd<-cbind.data.frame(duke,dooly,ddochi,donat,gildong,heedong)
dd <- NULL
dd<-cbind.data.frame(duke,dooly,ddochi,donat,gildong,heedong)
dd
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps,control=list(wordLengths = c(1, Inf)))
tdm
(m <- as.matrix(tdm))
rowsum(m)
rowSums(m)
#문제2 - 가장 많이 선택된 과일
rowSums(m) %>% arrange()
arrange(rowSums(m))
tdm
#문제2 - 가장 많이 선택된 과일
rowSums(m)
View(rowSums(m))
arrange(rowSums(m)$V1)
#문제2 - 가장 많이 선택된 과일
tmp<-rowSums(m)
tmp
tmp %>% arrange(tmp)
tmp
sort(tmp)
sort(tmp) %>% head(1)
sort(tmp,desc()) %>% head(1)
sort(tmp,decreasing = T) %>% head(1)
#문제3 - 가장 적게 선택된 과일
sort(tmp) %>% head(1)
#문제2 - 가장 많이 선택된 과일
tmp<-rowSums(m)
tmp
#문제1 - 좋아하는 과일이 가장 유사한 친구들
com <- m %*% t(m)
com
dd <- NULL
d1 <- c("aaa bbb ccc")
d2 <- c("aaa bbb ddd")
d3 <- c("aaa bbb ccc")
d4 <- c("xxx yyy zzz")
dd <- c(d1, d2, d3, d4)
cps <- Corpus(VectorSource(dd))
dtm <- DocumentTermMatrix(cps)
as.matrix(dtm)
inspect(dtm)
m <- as.matrix(dtm)
m
com <- m %*% t(m)
com
dd <- NULL
d1 <- c("aaa bbb ccc")
d2 <- c("aaa bbb ddd")
d3 <- c("aaa bbb ccc")
d4 <- c("xxx yyy zzz")
dd <- c(d1, d2, d3, d4)
cps <- Corpus(VectorSource(dd))
dtm <- DocumentTermMatrix(cps)
as.matrix(dtm)
inspect(dtm)
m <- as.matrix(dtm)
m
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps,control=list(wordLengths = c(1, Inf)))
(m <- as.matrix(tdm))
dd <- NULL
duke<-c("사과","포도","망고")
dooly<-c("포도","자몽","자두")
ddochi<-c("복숭아","사과","포도")
donat<-c("오렌지","바나나","복숭아")
gildong<-c("포도","바나나","망고")
heedong<-c("포도","귤","오렌지")
dd<-cbind.data.frame(duke,dooly,ddochi,donat,gildong,heedong)
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps,control=list(wordLengths = c(1, Inf)))
(m <- as.matrix(tdm))
dd <- NULL
duke<-c("사과","포도","망고")
dooly<-c("포도","자몽","자두")
ddochi<-c("복숭아","사과","포도")
donat<-c("오렌지","바나나","복숭아")
gildong<-c("포도","바나나","망고")
heedong<-c("포도","귤","오렌지")
dd<-cbind.data.frame(duke,dooly,ddochi,donat,gildong,heedong)
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps,control=list(wordLengths = c(1, Inf)))
(m <- as.matrix(tdm))
#문제1 - 좋아하는 과일이 가장 유사한 친구들
com <- m %*% t(m)
com
dd <- NULL
duke<-c("사과","포도","망고")
dooly<-c("포도","자몽","자두")
ddochi<-c("복숭아","사과","포도")
donat<-c("오렌지","바나나","복숭아")
gildong<-c("포도","바나나","망고")
heedong<-c("포도","귤","오렌지")
dd<-cbind.data.frame(duke,dooly,ddochi,donat,gildong,heedong)
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps,control=list(wordLengths = c(1, Inf)))
(m <- as.matrix(tdm))
#문제1 - 좋아하는 과일이 가장 유사한 친구들
com <- m %*% m
com
#문제1 - 좋아하는 과일이 가장 유사한 친구들
com <- c(m) %*% m
com
dd <- NULL
duke<-c("사과","포도","망고")
dooly<-c("포도","자몽","자두")
ddochi<-c("복숭아","사과","포도")
donat<-c("오렌지","바나나","복숭아")
gildong<-c("포도","바나나","망고")
heedong<-c("포도","귤","오렌지")
dd<-cbind.data.frame(duke,dooly,ddochi,donat,gildong,heedong)
cps <- VCorpus(VectorSource(dd))
tdm <- TermDocumentMatrix(cps,control=list(wordLengths = c(1, Inf)))
(m <- as.matrix(tdm))
#문제1 - 좋아하는 과일이 가장 유사한 친구들
com <- t(m) %*% m
com
dist(com, method = "cosine")
tmp<-rowSums(m)
sort(tmp,decreasing = T) %>% head(1)
#문제3 - 가장 적게 선택된 과일
sort(tmp) %>% head(1)
install.packages("DBI")
install.packages("DBI")
library(DBI)
install.packages("RJDBC")
library(RJDBC)
#DB connect
drv<-JDBC("oracle.jdbc.driver.OracleDriver","c:/HS/ojdbc6.jar")
conn<-dbConnect(drv,"jdbc:oracle:thin:@localhost:1521:xe","jdbctest","jdbctest")
conn
dbListTables(conn)
result1<-dbReadTable(conn,"VISITOR")
result1<-dbReadTable(conn,"visitor")
result1<-dbReadTable(conn,"VISITOR")
result1
rs<-dbSendQuery(conn,"SELECT * FROM VISITOR")
rs
result2<-dbGetQuery(conn,"SELECT * FROM VISITOR")
result2
ret1<-dbFetch(rs,1)
ret1
ret2<-dbFetch(rs,2)
ret2
ret1<-dbFetch(rs,1)
ret2<-dbFetch(rs,2)
ret2
ret1
ret1<-dbFetch(rs,1)
ret1
#읽기3
rs<-dbSendQuery(conn,"SELECT * FROM VISITOR")
ret3<-dbFetch(rs)
ret3
#쓰기1
dbWriteTable(conn,"book",data.frame(bookname=c("자바의 정석","하둡 완벽 입문","이것이 리눅스"),price=c(30000,25000,32000)))
dbWriteTable(conn,"cars",head(cars,3))
#쓰기2 - sql문을 써서 넣는다.
dbSendUpdate(conn,"INSERT INTO VISITOR VALUES('R언어',sysdate,'R 언어로 데이터를 입력해요',visitor_seq.nextval)")
dbSendUpdate(conn,"INSERT INTO VISITOR VALUES('하둡',sysdate,'대용량 데이터 분산저장& 처리기술',visitor_seq.nextval)")
#수정
dbSendUpdate(conn,"INSERT INTO cars(speed,dist) VALUES(1,1)")
dbSendUpdate(conn,"INSERT INTO cars(speed,dist) VALUES(2,2)")
dbReadTable(conn,"CARS")
dbSendUpdate(conn,"update CARS SET DIST=DIST*100 where speed=1")
dbReadTable(conn,"CARS")
dbSendUpdate(conn,"UPDATE CARS SET DIST=DIST*3 where speed=1")
dbReadTable(conn,"CARS")
#삭제
dbRemoveTable(conn,"CARS")
#다양한 예제들
#예제1
df<-read.table("product_click.log",stringsAsFactors = F)
names(df)<-c("click_time","pid")
df$click_time<-as.character(df$click_time)
dbWriteTable(conn,"productlog",df)
result4<-dbReadTable(conn,,"PRODUCTLOG")
result4<-dbReadTable(conn,"PRODUCTLOG")
result4
rs<-dbSendQuery(conn,"SELECT * from mtcars where cyl=4")
#예제2
dbWriteTable(conn,"mtcars",mtcars)
rs<-dbSendQuery(conn,"SELECT * from mtcars where cyl=4")
rs
dbFetch(rs)
dbClearResult(rs)
rs
dbFetch(rs)
dbClearResult(rs)
rs<-dbSendQuery(conn,"select * from mtcars")
ret1<-dbFetch(rs,10)
ret2<-dbFetch(rs)
dbClearResult(rs)
nrow(ret1)
nrow(ret2)
rs<-dbSendQuery(conn,"SELECT * from mtcars where cyl=4")
dbClearResult(rs)
dbFetch(rs)
rs<-dbSendQuery(conn,"SELECT * from mtcars where cyl=4")
rs
iris
tmp<-data.frame(iris)
tmp
#prob1
rownames(tmp)=c("SLENGTH","SWIDTH","PLENGTH","PWIDTH","SPECIES")
#prob1
colnames(tmp)=c("SLENGTH","SWIDTH","PLENGTH","PWIDTH","SPECIES")
tmp
dbWriteTable(conn,"IRIS",tmp)
dbReadTable("IRIS")
dbReadTable(conn,"IRIS")
#porb3
ggplot(tmp,aes(x=tmp$SLENGTH,y=tmp$SWIDTH))
library(ggplot2)
#porb3
ggplot(tmp,aes(x=tmp$SLENGTH,y=tmp$SWIDTH))
#porb3
ggplot(tmp,aes(x=tmp$SLENGTH,y=tmp$SWIDTH))+
geom_point()
#porb3
ggplot(tmp,aes(x=SLENGTH,y=tmp$SWIDTH))+
geom_point()
#porb3
ggplot(tmp,aes(x=SLENGTH,y=SWIDTH))+
geom_point()
#porb3
ggplot(tmp,aes(x=SLENGTH,y=SWIDTH))+
geom_point()+
legend(species)
# 학생의 각 과목에 대한 합계 점수에 대한 그래프(가로막대 그래프)
xname <- 성적$학번;    #  x축 레이블용 벡터
barplot(t(성적1), main="성적그래프", ylab="학번", col=rainbow(3), space=0.1, cex.axis=0.8, names.arg=xname, cex=0.8, horiz=T);
legend(30,11, names(성적1), cex=0.8, fill=rainbow(3));
# 학생의 각 과목에 대한 합계 점수에 대한 그래프
xname <- 성적$학번;    #  x축 레이블용 벡터
par(xpd=T, mar=par()$mar+c(0,0,0,4));   # 우측에 범례가 들어갈 여백을 확보
barplot(t(성적1), main="성적그래프", ylab="점수", col=rainbow(3), space=0.1, cex.axis=0.8, names.arg=xname, cex=0.8)
legend(11,30, names(성적1), cex=0.8, fill=rainbow(3));
xname
ggplot(tmp,aes(x=SLENGTH,y=SWIDTH))+
geom_point()
ggplot(tmp,aes(x=SLENGTH,y=SWIDTH))+
geom_point(tmp$SPECIES)
#산점도 데이터 레이블
ggplot(airquality,aes(x=Day,y=Temp))+
geom_point()+
geom_text(aes(label=Temp,vjust=0,hjust=0))
airquality
#porb3
ggplot(tmp,aes(x=SLENGTH,y=SWIDTH))+
geom_point(aes(color=species))
#porb3
ggplot(data=tmp,aes(x=SLENGTH,y=SWIDTH))+
geom_point(aes(color=species))
tmp
#porb3
ggplot(data=tmp,aes(x=SLENGTH,y=SWIDTH))+
geom_point(aes(color=SPECIES,shpe=SPECIES))
#porb3
ggplot(data=tmp,aes(x=SLENGTH,y=SWIDTH))+
geom_point(aes(color=SPECIES,shape=SPECIES))
#porb3
ggplot(data=tmp,aes(x=SLENGTH,y=SWIDTH))+
geom_point(aes(color=SPECIES))
ggplot(data=tmp,aes(x=PLENGTH,y=PWIDTH))+
geom_point(aes(color=SPECIES))
#porb3
ggplot(data=tmp,aes(x=SLENGTH,y=SWIDTH))+
geom_point(aes(color=SPECIES))
ggsave("db1.jpg")
ggplot(data=tmp,aes(x=PLENGTH,y=PWIDTH))+
geom_point(aes(color=SPECIES))
ggsave("db2.jpg")
ggplot(data=tmp,aes(x=SLENGTH,y=SWIDTH,fill=SPECIES))
ggplot(data=tmp,aes(x=SLENGTH,y=SWIDTH))+
geom_point(aes(fill=SPECIES))
color
ggplot(data=tmp,aes(x=SLENGTH,y=SWIDTH))+
geom_point(aes(color=SPECIES))
#######java와 R의 연동
install.packages("Rserve")
.libPaths()
library(KoNLP)
install.packages("KoNLP")
install.packages("KoNLP")
library(KoNLP)
library(KoNLP)
install.packages("KoNLP")
library(KoNLP)
install.packages("KoNLP")
install.packages("KoNLP")
library(rJava)
library(KoNLP)
library(XML)
library(rvest)
library(KoNLP)
library(rJava)
library(KoNLP)
library(XML)
library(rvest)
library(KoNLP)
library(KoNLP)
library(rJava)
library(KoNLP)
library(rJava)
install.packages("KoNLP")
install.packages("KoNLP")
library(rJava)
library(KoNLP)
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
library(KoNLP)
library(rJava)
library(KoNLP)
remove.packages ("KoNLP")
remove.packages ("rJava")
install.packages("KoNLP")
install.packages("KoNLP")
install.packages("rJava")
library(KoNLP)
library(rJava)
library(KoNLP)
install.packages("KoNLP")
library(KoNLP)
install.packages("rJava")
library(rJava)
remove.packages("KoNLP")
remove.packages("rJava")
remove.packages("rJava")
remove.packages("KoNLP")
install.packages("KoNLP")
install.packages("rJava")
library(KoNLP)
library(rJava)
library(KoNLP)
install.packages("KoNLP")
library(KoNLP)
library(rJava)
library(KoNLP)
library(rJava)
install.packages("rJava")
install.packages("rJava")
install.packages("KoNLP")
library(rJava)
library(KoNLP)
library(KoNLP)
library(XML)
library(rvest)
library(rvest)
library(KoNLP)
library(rJava)
library(KoNLP)
library(rJava)
library(KoNLP)
library(rJava)
library(KoNLP)
library(rJava)
library(KoNLP)
library(KoNLP)
library(KoNLP)
install.packages("KoNLP")
install.packages("rJava")
library(KoNLP)
library(rJava)
install.packages("rJava")
View(성적2)
install.packages("rJava")
install.packages("KoNLP")
library(KoNLP)
library(rJava)
library(KoNLP)
detach("package:KoNLP", unload = TRUE)
library(KoNLP)
detach("package:KoNLP", unload = TRUE)
library(KoNLP)
detach("package:KoNLP", unload = TRUE)
library(KoNLP)
detach("package:KoNLP", unload = TRUE)
library(KoNLP)
library(Sejong)
detach("package:Sejong", unload = TRUE)
detach("package:KoNLP", unload = TRUE)
library(KoNLP)
detach("package:KoNLP", unload = TRUE)
library(KoNLP)
detach("package:KoNLP", unload = TRUE)
library(KoNLP)
install.packages("KoNLP")
library(KoNLP)
detach("package:KoNLP", unload = TRUE)
install.packages("KoNLP")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
library(KoNLP)
install.packages("rJava")
library(KoNLP)
library(rJava)
library(rJava)
library(KoNLP)
source("test.R")
source("test.R")
?source
imsi<-source("test.R")
imsi
imsi$value
library(KoNLP)
useSejongDic()
useNIADic()
word_data<-readLines("hotel2.txt")
word_data2<-sapply(word_data, extractNoun,USE.NAMES = F)
word_data2
undata<-unlist(word_data2)
undata
word_table<-table(undata)
word_table
sort(word_table2,decreasing = T)
sort(word_table,decreasing = T)
undata2<-Filter(function(x){nchar(x)>=2},undata)
word_table2<-table(undata2)
word_table2
sort(word_table2,decreasing = T)
sort(word_table2,decreasing = T) %>% head(10)
result<-sort(word_table2,decreasing = T) %>% head(10)
result
word_table2
tmp<-data.frame(word_table2)
tmp
result<-sort(tmp,decreasing = T) %>% head(10)
result<-sort(tmp$Freq,decreasing = T) %>% head(10)
result
sort(tmp$Freq,decreasing = T)
tmp$undata2 %>% sort(tmp$Freq, decreasing = T)
result<-tmp$undata2 %>% sort(tmp$Freq, decreasing = T) %>% head(10)
result
result<-tmp$undata2 %>% sort(tmp$Freq, decreasing = F) %>% head(10)
result
tmp
tmp$undata2 %>% sort(tmp$Freq, decreasing = F)
result<-arrange(tmp$undata2)
result<-arrange(tmp$undata2,tmp$Freq)
result<-arrange(tmp$undata2,desc(tmp$Freq))
tmp$undata2
result<-tmp$undata2 %>% arrange(tmp$Freq)
tmp
arrange(tmp,tmp$Freq)
arrange(tmp,tmp$Freq) %>% tmp$undata2
arrange(tmp,tmp$Freq) %>% select(tmp$undata2)
result<-arrange(tmp,tmp$Freq) %>% head(10)
result
arrange(tmp,tmp$Freq) %>% head(10)
arrange(tmp,desc(tmp$Freq)) %>% head(10)
result<-arrange(tmp,desc(tmp$Freq)) %>% head(10)
result
result$undata2
result$undata2
result
result<-arrange(tmp,desc(tmp$Freq)) %>% head(10)
result
result$Freq
result$undata2
library(KoNLP)
library(dplyr)
useNIADic()
word_data<-readLines("hotel2.txt")
word_data2<-sapply(word_data, extractNoun,USE.NAMES = F)
undata<-unlist(word_data2)
word_table<-table(undata)
undata2<-Filter(function(x){nchar(x)>=2},undata)
word_table2<-table(undata2)
tmp<-data.frame(word_table2)
result<-arrange(tmp,desc(tmp$Freq)) %>% head(10)
result
imsi<-source('c:/RStudy/lab.R');
imsi
imsi$value
