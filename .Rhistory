ft.2 <- function(x) return(x+10)
ft.3 <- function(x) invisible(x+10)
ft.1(100)
ft.2(100)
ft.3(100)
r1 <- ft.1(1000);r1
r2 <- ft.2(1000);r2
r3 <- ft.3(1000);r3
testParamType <- function(x){
if(is.vector(x)) print("벡터를 전달했군요!")
if(is.data.frame(x)) print("데이터프레임을 전달했군요!")
if(is.list(x)) print("리스트를 전달했군요!")
if(is.matrix(x)) print("매트릭스를 전달했군요!")
if(is.array(x)) print("배열을 전달했군요!")
if(is.function(x)) print("함수를 전달했군요!")
}
testParamType(100)
testParamType(LETTERS)
testParamType(data.frame())
testParamType(matrix())
testParamType(list())
testParamType(array())
testParamType(function(){})
#stop() 함수
testError1 <- function(x){
if(x<=0)
stop("양의 값만 전달 하숑!! 더 이상 수행 안할거임..")
return(rep("테스트",x))
}
testError1(5)
testError1(0)
#warning() 함수
testWarn <- function(x){
if(x<=0)
stop("양의 값만 전달 하숑!! 더 이상 수행 안할거임..")
if(x>5){
x<-5
warning("5보다 크면 안됨!! 하여 5로 처리했삼...!!")
}
return(rep("테스트",x))
}
testWarn(3)
testWarn(10)
test1 <-function(p){
cat("난 수행함\n")
testError(-1)
cat("나 수행할 까요? \n")
}
test1()
test1()
test1 <-function(p){
cat("난 수행함\n")
try(testError(-1))
cat("나 수행할 까요? \n")
}
test1()
#try()
test2 <- function(p){
cat("난 수행함\n")
try(testError(-1))
cat("나 수행할 까요? \n")
}
test2()
testAll <-function(p){
tryCatch({
if(p=="오류테스트"){
testError(-1)
}else if (p =="경고테스트"){
testWarn(6)
}else{
cat("정상 수행..\n")
print(testError(2))
print(testWarn(3))
}
},warning = function(w){
print(w)
cat("-.-;;\n")
}, error = function(e){
print(e)
cat("ㅠㅠ \n")
},finally ={
cat("오류, 경고 발생 여부를 따라서 반드시 수행되는 부분입니다요..\n")
})
}
testAll("오류테스트")
testAll("경고테스트")
testAll("아무거나")
testAll <-function(p){
tryCatch({  #에러가나면 catch
if(p=="오류테스트"){
testError1(-1)
}else if (p =="경고테스트"){
testWarn(6)
}else{
cat("정상 수행..\n")
print(testError1(2))
print(testWarn(3))
}
},warning = function(w){
print(w)
cat("-.-;;\n")
}, error = function(e){
print(e)
cat("ㅠㅠ \n")
},finally ={
cat("오류, 경고 발생 여부를 따라서 반드시 수행되는 부분입니다요..\n")
})
}
testAll("오류테스트")
testAll("경고테스트")
testAll("아무거나")
#실습1
exam1<-function(x,y){
return(abs(x-y))
}
exam1(10,20)
exam1(10,10)
exam1(10,20)
exam1(20,5)
exam1(5,30)
exam1(6,3)
#실습2
exam2<-function(num1,op,num2){
if(op=="+")
return(num1+num2)
else if(op=="-")
return(num1-num2)
else if(op=="*")
return(num1*num2)
else if(op=="%/%"){
if(num1==0){
return("오류1")
}else if(num2==0){
return("오류2")
}else{
return(num1&/&num2)
}
}else if(op=="%%"){
if(num1==0){
return("오류1")
}else if(num2==0){
return("오류2")
}else{
return(num1&&num2)
}
}
}
#실습2
exam2<-function(num1,op,num2){
if(op=="+")
return(num1+num2)
else if(op=="-")
return(num1-num2)
else if(op=="*")
return(num1*num2)
else if(op=="%/%"){
if(num1==0){
return("오류1")
}else if(num2==0){
return("오류2")
}else{
return(num1%/%num2)
}
}else if(op=="%%"){
if(num1==0){
return("오류1")
}else if(num2==0){
return("오류2")
}else{
return(num1%%num2)
}
}
}
exam2(10,+,20)
exam2(10,"+",20)
exam2(10,"*",20)
exam2(10,"-",20)
exam2(10,"%/%",20)
exam2(10,"%%",20)
exam2(10,"%%",0)
#실습3
exam3<-function(num,char="#"){
for(data in 1:num)
print(char)
return()
}
exam3(5)
exam3(5,$)
exam3(5,$)
exam3(5,"$")
exam4<-function(score){
if(score>=85){
grade<-"상"
}else if(score>=70){
grade<-"중"
}else{
grade<-"하"
}
cat(score,"점은",grade,"등급입니다")
}
exam4(85)
exam4(80)
exam4(8)
#실습5
countEvenOdd<-function(num){
even<-0
odd<-0
if(is.vector(num)){
for(i in num){
if(num[i]%%2==0){
even<-even+1
}else{
odd<-odd+1
}
}
}else{
return(0)
}
return(list(even,odd))
}
countEvenOdd(c(1,2,3,4,5))
countEvenOdd(5)
is.vector(5)
#실습5
countEvenOdd<-function(num){
even<-0
odd<-0
if(is.vector(num)){
for(i in num){
if(i%%2==0){
even<-even+1
}else{
odd<-odd+1
}
}
}else{
return(0)
}
return(list(even,odd))
}
countEvenOdd(c(1,2,3,4,5))
countEvenOdd(5)
countEvenOdd(c(1,2,3,4,5))
#실습5
countEvenOdd<-function(num){
even<-0
odd<-0
if(is.vector(num)){
for(i in num){
if(i%%2==0){
even<-even+1
}else{
odd<-odd+1
}
}
}else{
return(0)
}
return(list(even=even,odd=odd))
}
countEvenOdd(c(1,2,3,4,5))
countEvenOdd(5)
#실습6
vmSum<-function(v1){
if(is.vector(v1)){
if(is.numeric(v1)){
result<-sum(v1)
}else{
stop("숫자 벡터를 전달하숑!")
}
}else{
stop("벡터만 전달하숑!")
}
return(result)
}
vmSum(c(1,2,3))
vmSum(c(1,2,"d"))
vmSum(list())
vmSum(1,2,3)
vmSum(c(1,2,3,4))
vmSum(c(1,2,"3",4))
vmSum(exam4())
vmSum(exam4(33))
#실습7
createVector<-function(...){
if(is.na(c(...))){
return()
}else{
return(list(c(...)))
}
}
createVector(1,2)
createVector(c(1,2,3))
createVector()
#실습7
createVector<-function(...){
if(length(c(...))==0){
return()
}else{
return(list(c(...)))
}
}
createVector()
createVector(10,2)
createVector(10,2,"dd")
createVector(10,2,"dd",exam4(33))
createVector(10,2,"dd",exam1(10,20))
#실습8
number<-scan("iotest1.txt")
number
order(number)
sort(number)
sort(numver, decreasing = T)
sort(numver, decreasing = T)
sort(number, decreasing = T)
sum(number)
mean(number)
#실습9
number<-scan("iotest2.txt")
#실습9
word<-scan("iotest2.txt")
#실습9
word<-read.table("iotest2.txt")
word
#실습9
word<-readLines("iotest2.txt")
word
#실습9
word<-scan("iotest2.txt",what = "")
word
factor(word)
summary(word)
summary(factor(word))
sort(summary(factor(word)))
sort(summary(factor(word)))[6]
sort(summary(factor(word)),decreasing = T)
most<-sort(summary(factor(word)),decreasing = T)[1]
most
factor(word)
summary(word)
sort(summary(factor(word)),decreasing = T)[1]
sort(summary(factor(word)),decreasing = T)[1].name
which(sort(summary(factor(word)),decreasing = T)[1])
which.max(rainfall)
most<-whichsort(summary(factor(word)),decreasing = T)[1]
most<-sort(summary(factor(word)),decreasing = T)[1]
which(most)
most
which.max(rainfall)
summary(LETTERS)
rainfall <- c(21.6, 23.6, 45.8, 77.0, 102.2, 133.3, 327.9, 348.0, 137.6, 49.3, 53.0, 24.9)
rainfall > 100
rainfall[rainfall>100]
which(rainfall>100)
month.name[which(rainfall>100)]
month.abb[which(rainfall>100)]
month.korname <- c("1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월")
month.korname[which(rainfall>100)]
rainfall
month.korname
names(most)
cat("가장 많이 등장한 단어는",names(most),"입니다.")
createVector(10,2,"dd",exam1(10,20))
createVector(10,2,"dd",exam1(10,20))
#실습7
createVector<-function(...){
if(length(c(...))==0){
return()
}else{
data<-list(...)
for(item in data){
if(is.numeric(item)){
num <- append(num,item)
}else if(is.character(item)){
char <- append(char,item)
}else if(is.logical(item))
logi <- append(logi,item)
}
}
return(list(num,char,logi))
}
createVector()
createVector(10,2,"dd",exam1(10,20))
#실습7
createVector<-function(...){
num<-0
char<-""
logi<-""
if(length(c(...))==0){
return()
}else{
data<-list(...)
for(item in data){
if(is.numeric(item)){
num <- append(num,item)
}else if(is.character(item)){
char <- append(char,item)
}else if(is.logical(item))
logi <- append(logi,item)
}
}
return(list(num,char,logi))
}
createVector()
createVector(10,2,"dd",exam1(10,20))
countEvenOdd(c(1,2,3,4,5))
countEvenOdd(5)
#실습7
createVector<-function(...){
num<-0
char<-NULL
logi<-NULL
if(length(c(...))==0){
return()
}else{
data<-list(...)
for(item in data){
if(is.numeric(item)){
num <- append(num,item)
}else if(is.character(item)){
char <- append(char,item)
}else if(is.logical(item))
logi <- append(logi,item)
}
}
return(list(num,char,logi))
}
createVector()
createVector(10,2,"dd",exam1(10,20))
#실습7
createVector<-function(...){
num<-0
char<-NULL
logi<-NULL
if(length(c(...))==0){
return()
}else{
data<-list(...)
for(item in data){
if(is.numeric(item)){
num <- append(num,item)
}else if(is.character(item)){
char <- append(char,item)
}else if(is.logical(item))
logi <- append(logi,item)
}
}
return(list(numb=num,char=char,logic=logi))
}
createVector()
createVector(10,2,"dd",exam1(10,20))
createVector(10,2,"dd",exam1(10,20),TRUE)
#실습7
createVector<-function(...){
num<-NULL
char<-NULL
logi<-NULL
if(length(c(...))==0){
return()
}else{
data<-list(...)
for(item in data){
if(is.numeric(item)){
num <- append(num,item)
}else if(is.character(item)){
char <- append(char,item)
}else if(is.logical(item))
logi <- append(logi,item)
}
}
return(list(numb=num,char=char,logic=logi))
}
createVector()
createVector(10,2,"dd",exam1(10,20),TRUE)
createVector(10,2,"dd",10,20,TRUE)
exam3(5,"$")
exam3<-function(num,char="#"){
for(data in 1:num)
cat(char)
return()
}
exam3(5,"$")
#실습7
createVector<-function(...){
num<-NULL #혹은 num<-c() 형식으로 해도 됌
char<-NULL
logi<-NULL
if(length(c(...))==0){
return()
}else{
data<-list(...)
for(item in data){
if(is.numeric(item)){
num <- append(num,item)
}else if(is.character(item)){
char <- append(char,item)
}else if(is.logical(item))
logi <- append(logi,item)
}
}
return(list(number=num,character=char,logic=logi))
}
createVector()
createVector(10,2,"dd",10,20,TRUE)
cat("가장 많이 등장한 단어는",names(most),"입니다.")
#실습9
word<-scan("iotest2.txt",what = )
#실습9
word<-scan("iotest2.txt",what ="")
factor(word)
most<-sort(summary(factor(word)),decreasing = T)[1]
cat("가장 많이 등장한 단어는",names(most),"입니다.")
