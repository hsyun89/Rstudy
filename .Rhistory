wordcloud2(word_table2)
wordcloud2(demoFreq,figPath = "book/peace.png")
wordcloud2(demoFreq,figPath = "book/peace.png")
wordcloud2(demoFreq,figPath = "book/peace.png")
wordcloud2(demoFreq,figPath = "book/peace.png")
wordcloud2(word_table2)
wordcloud2(demoFreq,figPath = "book/peace.png")
wordcloud2(demoFreq,figPath = "book/peace.png")
wordcloud2(demoFreqC,figPath ="book/peace.png")
wordcloud2(demoFreq)
wordcloud2(demoFreq,figPath = "book/peace.png")
wordcloud2(demoFreq,figPath = "book/peace.png")
wordcloud2(demoFreq,figPath = "book/peace.png")
wordcloud2(demoFreq,figPath = "book/peace.png")
wordcloud2(demoFreq,figPath = "book/peace.png")
wordcloud2(demoFreq,figPath = "book/peace.png")
wordcloud2(demoFreq, size=clsize, color =clcolor, backgroundColor =clbgcolor, figPath = "book/peace.png")
wordcloud2(demoFreq,  color =clcolor, backgroundColor =clbgcolor, figPath = "book/peace.png")
library(devtools)
devtools::install_github("lchiffon/wordcloud2")
wordcloud2(demoFreq,figPath = "book/peace.png")
wordcloud2(demoFreq,figPath = "book/peace.png")
words<-read.csv("wc.csv")
words
word_table2
#기술 뽑기
result<-NULL
#첫페이지
for(i in 1:30){
css<-paste("#smGiList > div.list > ul > li:nth-child(",i,") > span.detailInfo > p.gibInfo > a")
doms1<-remDr$findElements(using ="css selector",css)
tech <- sapply(doms1,function(x){x$getElementText()})
tech_v <- unlist(tech)
result<-c(result,tech_v)
}
remDr<-remoteDriver(remoteServerAddr="localhost", port=4445, browserName="chrome")
remDr$open()
remDr$navigate("https://www.jobkorea.co.kr")
webElem <- remDr$findElement(using="css","[name='stext']")
webElem$sendKeysToElement(list("자바",key="enter"))
#기술 뽑기
result<-NULL
#첫페이지
for(i in 1:30){
css<-paste("#smGiList > div.list > ul > li:nth-child(",i,") > span.detailInfo > p.gibInfo > a")
doms1<-remDr$findElements(using ="css selector",css)
tech <- sapply(doms1,function(x){x$getElementText()})
tech_v <- unlist(tech)
result<-c(result,tech_v)
}
#2~10페이지
for(j in 2:10){
css<-paste("#smGiList > div.tplPagination > ul > li:nth-child(",j,") > a")
doms1<-remDr$findElements(using ="css selector",css)
Sys.sleep(1)
for(i in 1:30){
css<-paste("#smGiList > div.list > ul > li:nth-child(",i,") > span.detailInfo > p.gibInfo > a")
doms1<-remDr$findElements(using ="css selector",css)
tech <- sapply(doms1,function(x){x$getElementText()})
tech_v <- unlist(tech)
result<-c(result,tech_v)
}
}
result
result<-strsplit(result,", ")
result<-unlist(result)
result<-table(result)
sort(result,decreasing = T)
wordcloud2(result)
#잡코리아 검색창에 자바 치기
library(RSelenium)
remDr<-remoteDriver(remoteServerAddr="localhost", port=4445, browserName="chrome")
remDr$open()
remDr$navigate("https://www.jobkorea.co.kr")
webElem <- remDr$findElement(using="css","[name='stext']")
webElem$sendKeysToElement(list("자바",key="enter"))
#기술 뽑기
result<-NULL
endFlag<-0
repeat{
#첫페이지
for(i in 1:30){
css<-paste("#smGiList > div.list > ul > li:nth-child(",i,") > span.detailInfo > p.gibInfo > a")
doms1<-remDr$findElements(using ="css selector",css)
tech <- sapply(doms1,function(x){x$getElementText()})
tech_v <- unlist(tech)
result<-c(result,tech_v)
}
endFlag<-endFlag+1
#2~10페이지
for(j in 2:10){
css<-paste("#smGiList > div.tplPagination > ul > li:nth-child(",j,") > a")
doms1<-remDr$findElements(using ="css selector",css)
Sys.sleep(1)
for(i in 1:30){
css<-paste("#smGiList > div.list > ul > li:nth-child(",i,") > span.detailInfo > p.gibInfo > a")
doms1<-remDr$findElements(using ="css selector",css)
tech <- sapply(doms1,function(x){x$getElementText()})
tech_v <- unlist(tech)
result<-c(result,tech_v)
}
}
if(endFlag==20)
break;
##11페이지로 넘기기
doms1<-remDr$findElements(using ="css selector","#smGiList > div.tplPagination > p > a")
Sys.sleep(1)
}
result
endFlag
endFlag
#기술 뽑기
result<-NULL
endFlag<-0
repeat{
#첫페이지
for(i in 1:30){
css<-paste("#smGiList > div.list > ul > li:nth-child(",i,") > span.detailInfo > p.gibInfo > a")
doms1<-remDr$findElements(using ="css selector",css)
tech <- sapply(doms1,function(x){x$getElementText()})
tech_v <- unlist(tech)
result<-c(result,tech_v)
}
endFlag<-endFlag+1
#2~10페이지
for(j in 2:10){
css<-paste("#smGiList > div.tplPagination > ul > li:nth-child(",j,") > a")
doms1<-remDr$findElements(using ="css selector",css)
Sys.sleep(1)
for(i in 1:30){
css<-paste("#smGiList > div.list > ul > li:nth-child(",i,") > span.detailInfo > p.gibInfo > a")
doms1<-remDr$findElements(using ="css selector",css)
tech <- sapply(doms1,function(x){x$getElementText()})
tech_v <- unlist(tech)
result<-c(result,tech_v)
}
}
if(endFlag==2)
break;
##11페이지로 넘기기
doms1<-remDr$findElements(using ="css selector","#smGiList > div.tplPagination > p > a")
Sys.sleep(1)
}
remDr$open()
remDr$navigate("https://www.jobkorea.co.kr")
webElem <- remDr$findElement(using="css","[name='stext']")
webElem$sendKeysToElement(list("자바",key="enter"))
#기술 뽑기
result<-NULL
endFlag<-0
repeat{
endFlag<-endFlag+1
#첫페이지
for(i in 1:30){
css<-paste("#smGiList > div.list > ul > li:nth-child(",i,") > span.detailInfo > p.gibInfo > a")
doms1<-remDr$findElements(using ="css selector",css)
tech <- sapply(doms1,function(x){x$getElementText()})
tech_v <- unlist(tech)
result<-c(result,tech_v)
}
#2~10페이지
for(j in 2:10){
css<-paste("#smGiList > div.tplPagination > ul > li:nth-child(",j,") > a")
doms1<-remDr$findElements(using ="css selector",css)
Sys.sleep(1)
for(i in 1:30){
css<-paste("#smGiList > div.list > ul > li:nth-child(",i,") > span.detailInfo > p.gibInfo > a")
doms1<-remDr$findElements(using ="css selector",css)
tech <- sapply(doms1,function(x){x$getElementText()})
tech_v <- unlist(tech)
result<-c(result,tech_v)
}
}
if(endFlag==2)
break;
##11페이지로 넘기기
doms1<-remDr$findElements(using ="css selector","#smGiList > div.tplPagination > p > a")
Sys.sleep(1)
}
result
result<-strsplit(result,", ")
result<-unlist(result)
result<-table(result)
sort(result,decreasing = T)
remDr$open()
remDr$navigate("https://www.jobkorea.co.kr")
webElem <- remDr$findElement(using="css","[name='stext']")
webElem$sendKeysToElement(list("자바",key="enter"))
#기술 뽑기
result<-NULL
endFlag<-0
repeat{
endFlag<-endFlag+1
#첫페이지
for(i in 1:30){
css<-paste("#smGiList > div.list > ul > li:nth-child(",i,") > span.detailInfo > p.gibInfo > a")
doms1<-remDr$findElements(using ="css selector",css)
tech <- sapply(doms1,function(x){x$getElementText()})
tech_v <- unlist(tech)
result<-c(result,tech_v)
}
#2~10페이지
for(j in 2:10){
css<-paste("#smGiList > div.tplPagination > ul > li:nth-child(",j,") > a")
doms1<-remDr$findElements(using ="css selector",css)
Sys.sleep(1)
for(i in 1:30){
css<-paste("#smGiList > div.list > ul > li:nth-child(",i,") > span.detailInfo > p.gibInfo > a")
doms1<-remDr$findElements(using ="css selector",css)
tech <- sapply(doms1,function(x){x$getElementText()})
tech_v <- unlist(tech)
result<-c(result,tech_v)
}
}
if(endFlag==2)
break;
##11페이지로 넘기기
doms1<-remDr$findElements(using ="css selector","#smGiList > div.tplPagination > p > a")
Sys.sleep(1)
}
write(result, "jobwithjava.txt")
result<-strsplit(result,", ")
result<-unlist(result)
result<-table(result)
sort(result,decreasing = T)
wordcloud2(result)
write.csv(result, "jobwithjava.csv")
result<-sort(result,decreasing = T)
write.csv(result, "jobwithjava.csv")
colnames(result,c("키워드","빈도수"))
colnames(result)=c("키워드","빈도수")
result
View(result)
colnames(result)=c("키워드","빈도수")
result<-colnames(result)=c("키워드","빈도수")
colnames(result)=c("키워드","빈도수")
names(result)
rownames(result)=c("키워드","빈도수")
names(result)
result
colnames(result)
data.frame(result)
result<-data.frame(result)
colnames(result)=c("키워드","빈도수")
result
result[1:15]
head(result,15)
write.csv(head(result,15), "jobwithjava.csv")
write.csv(head(result,15), "jobwithjava.csv")
library(wordcloud2)
wordcloud2(result)
install.packages("dygraphs")
library(dygraphs)
# 데이터 준비하기
economics <- ggplot2::economics
head(economics)
head(eco);tail(eco)
# 데이터 준비하기
economics <- ggplot2::economics
head(economics)
# 시간 순서 속성을 지니는 xts 데이터 타입으로 변경
library(xts)
eco <- xts(economics$unemploy, order.by = economics$date)
head(eco);tail(eco)
dim(eco)
# 인터랙티브 시계열 그래프 만들기
# 그래프 생성
dygraph(eco)
# 날짜 범위 선택 기능
dygraph(eco) %>% dyRangeSelector()
# 지도 시각화
# 지도 그래프
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggmap")
library(ggmap)
register_google(key='AIzaSyD-nx_y7aBlJgfgVZRaIwMbnShQJsxpryY')
library(ggmap)
register_google(key='AIzaSyD-nx_y7aBlJgfgVZRaIwMbnShQJsxpryY')
lon <- 127.0147559
lat <- 37.5431424
cen <- c(lon,lat)
mk <- data.frame(lon=lon, lat=lat)
map <- get_googlemap(center=cen, maptype="roadmap",zoom=12, marker=mk)
ggmap(map)
map <- get_googlemap(center=cen, maptype="satellite",zoom=14, marker=mk)
ggmap(map)
map <- get_googlemap(center=cen, maptype="satellite",zoom=14, marker=mk)
ggmap(map)
map <- get_googlemap(center=cen, maptype="satellite",zoom=14, marker=mk)
map <- get_googlemap(center=cen, maptype="roadmap",zoom=12, marker=mk)
ggmap(map)
map <- get_googlemap(center=cen, maptype="roadmap",zoom=12, marker=mk)
ggmap(map)
map <- get_googlemap(center=cen, maptype="satellite",zoom=14, marker=mk)
ggmap(map)
map <- get_googlemap(center=cen, maptype="terrain",zoom=8, marker=mk)
ggmap(map)
map <- get_googlemap(center=cen, maptype="hybrid",zoom=14, marker=mk)
ggmap(map)+labs(title="테스트임", xlab="경도", ylab="위도")
map <- get_map(center=cen, maptype="terrain-labels",zoom=8, marker=mk)
ggmap(map)
ggmap(map)
map <- get_map(center=cen, maptype="toner-hybrid",zoom=8, marker=mk)
ggmap(map)
map <- get_map(center=cen, maptype="watercolor",zoom=8, marker=mk)
ggmap(map)
map <- get_googlemap(center=cen, maptype="hybrid",zoom=14, marker=mk)
ggmap(map)+labs(title="테스트임", xlab="경도", ylab="위도")
ggmap(map)+labs(title="테스트임", xlim="경도", ylab="위도")
ggmap(map)+labs(title="테스트임",xlab("경도"), ylab="위도")
ggmap(map)+labs(title="테스트임",xlab("경도"), xlab="경도", ylab="위도")
ggmap(map)+labs(title="테스트임",x="경도", ylab="위도")
ggmap(map)+labs(title="테스트임",x="경도", y="위도")
map <- get_map(center=cen, maptype="terrain-labels",zoom=8, marker=mk)
ggmap(map)
mk <- geocode("seoul", source = "google")
print(mk)
cen <- c(mk$lon, mk$lat)
map <- get_googlemap(center=cen, maptype="roadmap",zoom=12, marker=mk)
ggmap(map)
mk <- geocode(enc2utf8("부산"), source = "google")
cen <- c(mk$lon, mk$lat)
map <- get_googlemap(center=cen, maptype="roadmap",zoom=12, marker=mk)
ggmap(map)
mk <- geocode(enc2utf8("강남구 역삼동 테헤란로 212"), source = "google")
cen <- c(mk$lon, mk$lat)
map <- get_googlemap(center=cen, maptype="roadmap",zoom=16)
ggmap(map) +
geom_point(aes(x=mk$lon, y=mk$lat), alpha=0.4, size=5, color="pink") +
geom_text(aes(x=mk$lon, y=mk$lat, label="우리가 공부하는 곳", vjust=0, hjust=0))
names <- c("용두암","성산일출봉","정방폭포",
"중문관광단지","한라산1100고지","차귀도")
addr <- c("제주시 용두암길 15",
"서귀포시 성산읍 성산리",
"서귀포시 동홍동 299-3",
"서귀포시 중문동 2624-1",
"서귀포시 색달동 산1-2",
"제주시 한경면 고산리 125")
gc <- geocode(enc2utf8(addr))
gc
df <- data.frame(name=names,
lon=gc$lon,
lat=gc$lat)
cen <- c(mean(df$lon),mean(df$lat))
map <- get_googlemap(center=cen,
maptype="roadmap",
zoom=10,
size=c(640,640),
marker=gc)
ggmap(map)
library(XML)
API_key  <- "%2BjzsSyNtwmcqxUsGnflvs3rW2oceFvhHR8AFkM3ao%2Fw50hwHXgGyPVutXw04uAXvrkoWgkoScvvhlH7jgD4%2FRQ%3D%3D"
bus_No <- "402"
url <- paste("http://ws.bus.go.kr/api/rest/busRouteInfo/getBusRouteList?ServiceKey=", API_key, "&strSrch=", bus_No, sep="")
doc <- xmlParse(url)
top <- xmlRoot(doc) ; top
df <- xmlToDataFrame(getNodeSet(doc, "//itemList")); df
busRouteId <- df$busRouteId
busRouteId
url <- paste("http://ws.bus.go.kr/api/rest/buspos/getBusPosByRtid?ServiceKey=", API_key, "&busRouteId=", busRouteId, sep="")
doc <- xmlParse(url)
top <- xmlRoot(doc); top
df <- xmlToDataFrame(getNodeSet(doc, "//itemList")); df
df$gpsX <- as.numeric(as.character(df$gpsX))
df$gpsY <- as.numeric(as.character(df$gpsY))
gc <- data.frame(lon=df$gpsX, lat=df$gpsY);gc
cen <- c(mean(gc$lon), mean(gc$lat))
map <- get_googlemap(center=cen, key="AIzaSyD-nx_y7aBlJgfgVZRaIwMbnShQJsxpryY", source="google", maptype="roadmap",zoom=12, marker=gc)
ggmap(map)
API_key  <- "%2BjzsSyNtwmcqxUsGnflvs3rW2oceFvhHR8AFkM3ao%2Fw50hwHXgGyPVutXw04uAXvrkoWgkoScvvhlH7jgD4%2FRQ%3D%3D"
bus_No <- "100"
url <- paste("http://ws.bus.go.kr/api/rest/busRouteInfo/getBusRouteList?ServiceKey=", API_key, "&strSrch=", bus_No, sep="")
doc <- xmlParse(url)
top <- xmlRoot(doc) ; top
df <- xmlToDataFrame(getNodeSet(doc, "//itemList")); df
busRouteId <- df$busRouteId
busRouteId
url <- paste("http://ws.bus.go.kr/api/rest/buspos/getBusPosByRtid?ServiceKey=", API_key, "&busRouteId=", busRouteId, sep="")
doc <- xmlParse(url)
top <- xmlRoot(doc); top
df <- xmlToDataFrame(getNodeSet(doc, "//itemList")); df
df$gpsX <- as.numeric(as.character(df$gpsX))
df$gpsY <- as.numeric(as.character(df$gpsY))
gc <- data.frame(lon=df$gpsX, lat=df$gpsY);gc
cen <- c(mean(gc$lon), mean(gc$lat))
map <- get_googlemap(center=cen, key="AIzaSyD-nx_y7aBlJgfgVZRaIwMbnShQJsxpryY", source="google", maptype="roadmap",zoom=12, marker=gc)
ggmap(map)
API_key  <- "%2BjzsSyNtwmcqxUsGnflvs3rW2oceFvhHR8AFkM3ao%2Fw50hwHXgGyPVutXw04uAXvrkoWgkoScvvhlH7jgD4%2FRQ%3D%3D"
bus_No <- "6411"
url <- paste("http://ws.bus.go.kr/api/rest/busRouteInfo/getBusRouteList?ServiceKey=", API_key, "&strSrch=", bus_No, sep="")
doc <- xmlParse(url)
top <- xmlRoot(doc) ; top
df <- xmlToDataFrame(getNodeSet(doc, "//itemList")); df
busRouteId <- df$busRouteId
busRouteId
url <- paste("http://ws.bus.go.kr/api/rest/buspos/getBusPosByRtid?ServiceKey=", API_key, "&busRouteId=", busRouteId, sep="")
doc <- xmlParse(url)
top <- xmlRoot(doc); top
df <- xmlToDataFrame(getNodeSet(doc, "//itemList")); df
df$gpsX <- as.numeric(as.character(df$gpsX))
df$gpsY <- as.numeric(as.character(df$gpsY))
gc <- data.frame(lon=df$gpsX, lat=df$gpsY);gc
cen <- c(mean(gc$lon), mean(gc$lat))
map <- get_googlemap(center=cen, key="AIzaSyD-nx_y7aBlJgfgVZRaIwMbnShQJsxpryY", source="google", maptype="roadmap",zoom=12, marker=gc)
ggmap(map)
mk <- geocode(enc2utf8("언주로 70길 10"), source = "google")
cen <- c(mk$lon, mk$lat)
map <- get_googlemap(center=cen, maptype="roadmap",zoom=12, marker=mk)
ggmap(map)
today<-Sys.Date()
weekdays(today)
ggmap(map)+
geom_text(aes(x=mk$lon, y=mk$lat, label="우리가 공부하는 곳", vjust=0, hjust=0))
ggmap(map)+
labs(title="현수의 집",x="경도", y="위도")
today<-Sys.Date()
today<-weekdays(today)
tmp<-NULL
if(today=="월"|today=="화"){
tmp<-"terrain"
}if(today=="수"|today=="목"){
tmp<-"satellite"
}if(today=="금"){
tmp<-"roadmap"
}if(today=="토"|today=="일"){
tmp<-"hybrid"
}
if(today=="월"|today=="화"){
tmp<-"terrain"
}
if(today=="수"|today=="목"){
tmp<-"satellite"
}
if(today=="금"){
tmp<-"roadmap"
}
if(today=="토"|today=="일"){
tmp<-"hybrid"
}
tmp
today
today=="금"
today=="토"
today=="일"
if(today=="월"|today=="화"){
tmp<-"terrain"
}
if(today=="수"|today=="목"){
tmp<-"satellite"
}
if(today=="금"){
tmp<-"roadmap"
}
if(today=="토"|today=="일"){
tmp<-"hybrid"
}
tmp
tmp<-NULL
tmp
if(today=="월"|today=="화"){
tmp<-"terrain"
}
tmp
if(today=="수"|today=="목"){
tmp<-"satellite"
}
if(today=="금"){
tmp<-"roadmap"
}
if(today=="토"|today=="일"){
tmp<-"hybrid"
}
tmp
today
if(today=="월요일"|today=="화요일"){
tmp<-"terrain"
}
if(today=="수요일"|today=="목요일"){
tmp<-"satellite"
}
if(today=="금요일"){
tmp<-"roadmap"
}
if(today=="토요일"|today=="일요일"){
tmp<-"hybrid"
}
tmp
today<-Sys.Date()
today<-weekdays(today)
type<-NULL
if(today=="월요일"|today=="화요일"){
type<-"terrain"
}
if(today=="수요일"|today=="목요일"){
type<-"satellite"
}
if(today=="금요일"){
type<-"roadmap"
}
if(today=="토요일"|today=="일요일"){
type<-"hybrid"
}
type
register_google(key='AIzaSyD-nx_y7aBlJgfgVZRaIwMbnShQJsxpryY')
mk <- geocode(enc2utf8("언주로 70길 10"), source = "google")
cen <- c(mk$lon, mk$lat)
map <- get_googlemap(center=cen, maptype=type,zoom=12, marker=mk)
ggmap(map)+
labs(title="현수의 집",x="경도", y="위도")
#저장
ggsave("mymap.png")
