#LIST
lds <- list(1,2,3)
summary(score$result)
table(score$result)
score$result = factor(score$result)
summary(score)
score
summary(score$result)
summary(factor(score$result))
summary(score$result)
summary(score$result)
summary(score)
summary(score)
score$id = character(score$id)
score$id = chars(score$id)
score$class = factor(score$class)
summary(score)
score$id = chartr(score$id)
score$id = as.character(score$id)
summary(score)
summary(score)
v <- c(10,3,7,4,8)
sort(v)
source('C:/Rstudy/day2.R', encoding = 'UTF-8', echo=TRUE)
order(v)
sort(v)
order(v)
v <- c(10,3,7,4,8)
sort(v)
order(v)
?order
emp <- read.csv(file.choose())
emp <- read.csv(file.choose())
emp
str(emp)
emp; str(emp)
emp <- read.csv(file.choose(),stringsAsFactors = F)
emp; str(emp)
# 1. emp에서 직원 이름
emp$ename
emp[,2]
emp[,2, drop=FALSE]
emp["ename"]
emp[2]
emp[,"ename",drop=F]
emp[,2, drop=FALSE]
# 2. emp에서 직원이름, 잡, 샐러리
emp[,c(2,3,6)]
emp[,c("ename","job","sal")]
subset(emp,select = c(ename, job, sal))
?subset
# 3. emp에서 1,2,3 행 들만
emp[1:3,]
emp[c(1,2,3),]
# 4. ename이 "KING"인 직원의 모든 정보
emp[9,]
emp$ename=="KING"
subset(emp,subset= emp$ename=="KING")
emp[emp$ename=="KING",]
emp[c(F,F,F,F,F,F,F,F,T,F,F,F,F,F,F,F,F,F,F,F),]
subset(emp,emp$ename=="KING")
c(F,F,F,F,F,F,F,F,T,F,F,F,F,F,F,F,F,F,F,F)
# 4. ename이 "KING"인 직원의 모든 정보
emp[9,]
subset(emp, emp$sal>= 2000, c("ename","sal"))
# 5. select ename,sal from emp where sal>=2000
subset(emp, select=c("ename","sal"), subset= emp$sal>= 2000)
emp[emp$sal>=2000,c("ename","sal")]
# 6. select ename,sal from emp where sal between 2000 and 3000
subset(emp, select=c("ename","sal"), subset=(sal>=2000 & sal<=3000))
#LIST
lds <- list(1,2,3)
emp[emp$sal>=2000 & emp$sal <=3000, c("ename","sal")]
emp$sal>=2000 & emp$sal <=3000
#문제10
a<-array(1:24,2,3)
#문제10
a<-array(1:24,dim=c(2,3,5))
a
#문제10
a<-array(1:24,dim=c(2,3,4))
a
#문제11
a[2,3,4]
#문제12
a[2,]
#문제12
a[2,,]
#문제13
a[,1,]
a[,,3]
a<-a+100
a
a+100
#문제10
a<-array(1:24,dim=c(2,3,4))
a+100
a[,,4]*100
a[c(1,2),3,]
a
a[1,c(2,3),]
a<-a[2,,2]+100
a
a
#문제10
a<-array(1:24,dim=c(2,3,4))
a[2,,2]<-a[2,,2]+100
a
a[,,1]<-a[,,1]-2
a
a<-a*10
remove(a)
a
#문제11
data.frame(x=1:5,y=(2:10,2)
#문제11
data.frame(x=1:5,y=(2:10,2))
#문제11
data.frame(x=1:5,(y=2:10,2))
#문제11
x<-1:5
y<-seq(2,10,2)
data.frame(x,y))
df1<-data.frame(x,y))
df1<-data.frame(x,y)
df1
#문제12
col1<-1:5
col2<-letters(1:5)
col2<-letters[1:5]
col3<-6:10
df1<-data.frame(col1,col2,col3)
df2<-data.frame(col1,col2,col3)
df2
#문제13
제품명<-c("사과","딸기","수박")
가격<-c(1800,1500,3000)
판매량<-c(24,38,13)
df3<-data.frame(제품명,가격,판매량)
df3
#문제14
mean(df3)
df3<-data.frame(제품명,가격,판매량,stringsAsFactors = F)
df3
#문제14
mean(df3$가격)
#문제14
mean(df3$가격)
mean(df3$판매량)
#문제15
name <- c(“Potter”, “Elsa”, “Gates”, “Wendy”, “Ben”)
gender <- factor(c(“M”, “F”, “M”, “F”, “M”))
math <- c(85, 76, 99, 88, 40)
df4<-data.frame(name,gender,math)
df4<-data.frame(name,gender,math)
gender <- factor(c(“M”, “F”, “M”, “F”, “M”))
#문제15
name <- c(“Potter”, “Elsa”, “Gates”, “Wendy”, “Ben”)
#문제15
name<-c(“Potter”, “Elsa”, “Gates”, “Wendy”, “Ben”)
#문제15
name<-c("Potter","Elsa","Gates","Wendy","Ben")
gender<-factor(c("M","F","M","F","M"))
math <- c(85, 76, 99, 88, 40)
df4<-data.frame(name,gender,math,stringsAsFactors = F)
str(df4)
stat<-c(76,73,95,82,35)
cbind(df4,stat)
df4
df4<-cbind(df4,stat)
df4
score<-df4$math+df4$stat
df4<-cbind(df4,score)
df4
grade<-ifelse(df4$score>=150,"A",ifelse(df4$score>=100,"B",ifelse(df4$score>=70,"C","D")))
grade
df4<-cbind(df4,grade)
df4
#문제16
emp <- read.csv("emp.csv")
emp
emp
#문제17
emp[c(3,4,5),]
#문제18
emp[,"ename"]
#문제19
emp[,c("ename","sal")]
#문제20
emp[emp$job=="SALESMAN",c("name","sal","job")]
#문제20
emp[emp$job=="SALESMAN",c("ename","sal","job")]
#문제21
emp[emp$sal>=1000 & emp$sal<3000,c("ename","sal","deptno")]
#문제22
emp[emp$job!="ANALYST",c("ename","job","sal")]
#문제23
emp[emp$job==c("SALESMAN","ANALYST"),c("ename","job")]
#문제24
emp[emp$comm==is.nan(emp$comm),c("ename","comm")]
#문제24
emp[is.nan(emp$comm),c("ename","comm")]
#문제24
emp[emp$comm==is.nan(),c("ename","comm")]
#문제24
emp[emp$comm==is.na(),c("ename","comm")]
is.na(emp$comm)
#문제24
emp[is.na(emp$comm),c("ename","comm")]
emp
#문제25
sbuset[emp,sort(emp$sal)]
#문제25
subset[emp,sort(emp$sal)]
#문제25
subset[emp,emp,sort(emp$sal)]
?subset
#문제25
subset[emp,select,sort(emp$sal)]
sort(emp$sal)
subset(emp,subset= emp$ename=="KING")
#문제25
subset[emp,sort(emp$sal)]
sort(emp$sal)
emp[,order(emp$sal)]
emp[c(order(emp$sal)),]
#문제25
emp[c(order(emp$sal)),]
#문제25
emp[c(order(emp$sal)),]
#문제23
emp[emp$job==c("SALESMAN","ANALYST"),c("ename","job")]
emp
#문제23
emp[emp$job==c("SALESMAN","ANALYST"),c("ename","job")]
emp
#문제23
emp[emp$job=="SALESMAN"|emp$job=="ANALYST",c("ename","job")]
#문제25
emp[order(emp$sal),]
#LIST
lds <- list(1,2,3)
lds
lds+100
lds
lds[1]
lds[1]+10
lds[[1]]+10
lds[1]
names(lds) <- LETTERS[1:3]
lds
lds
lds[[2]]
lds[["B"]]
lds$B
lds[1]
lds[1]
lds
lds[1]
a<-list(
a = 1:3,
b= "a string",
c=pi,
d=list(-1,-5)
)
a
a[1]
a[[1]]
a[[1]][1]
a[[1]]
unlist(a[1])
a[1]
a
unlist(a[1])
a[1]
new_a<-unlist(a[1])
new_a
names(new_a)
names(new_a)<-NULL
paste("I'm","Duli","!!")
fruit <- c("Apple", "Banana", "Strawberry")
food <- c("Pie","Juice", "Cake")
paste(fruit, food)
paste(fruit, food, sep="")
paste(fruit, food, sep=":::")
paste(fruit, food)
paste(fruit, food, sep="", collapse="-")
paste(fruit, food, sep="", collapse="-")
paste(fruit, food, sep="", collapse="")
paste(fruit, food, collapse=",")
site<-"http://movie.naver.com/movie/point/af/list.nhn?page="
pageNum <- 10
url <- paste(site, pageNum, sep="")
site<-"http://movie.naver.com/movie/point/af/list.nhn?page="
pageNum <- 10
url <- paste(site, pageNum, sep="")
ls
#지금까지 만들어진 데이터set와 함수 저장
ls()
legtn(ls())
legth(ls())
length(ls())
save(list=ls(),file="all.RData") # varience will save in "all.rda" of rexam
rm(list=ls())
ls()
load("all.RData")
ls()
#제어문
#if else
randomNum <-sample(1:10,1)
cat(randomNum,":5보다 작거나 같군요","\n")
cat(randomNum,":5보다 크군요","\n")
if(randomNum>5){
cat(randomNum,":5보다 크군요","\n")
}else{
cat(randomNum,":5보다 작거나 같군요","\n")
}
if(randomNum%%2){
cat(randomNum,";홀수","\n")
}else{
cat(randomNum,";짝수","\n")
}
if(randomNum>5){
cat(randomNum,":5보다 크군요","\n")
}else{
cat(randomNum,":5보다 작거나 같군요","\n")
}
if(randomNum>5){
cat(randomNum,":5보다 크군요","\n")
}else{
cat(randomNum,":5보다 작거나 같군요","\n")
}
if(randomNum>5){
cat(randomNum,":5보다 크군요","\n")
}else{
cat(randomNum,":5보다 작거나 같군요","\n")
}
#제어문
#if else
randomNum <-sample(1:10,1)
cat(randomNum,":5보다 크군요","\n")
if(randomNum>5){
cat(randomNum,":5보다 크군요","\n")
}else{
cat(randomNum,":5보다 작거나 같군요","\n")
}
if(randomNum%%2){
cat(randomNum,";홀수","\n")
}else{
cat(randomNum,";짝수","\n")
}
if(randomNum%%2 == 1){
cat(randomNum,";홀수","\n")
}else{
cat(randomNum,";짝수","\n")
}
#for문
#for 실습
for(data in month.name)
for(data in month.name)
print(data)
for(data in month.name)print(data);print("ㅋㅋ")
#for문
#for 실습
for(data in month.name)
print(data)
month.name
cat("hello?","\n")
cat("hello?","\n")
for(i in 1:9){
for(j in 1:9){
if(i*j>30){
bb<-T
break
}
cat(i,"*",j,"=",i*j,"\t")
}
cat("\n")
if(bb) #bb가 TRUE이면
break
}
for(i in 1:9){
for(j in 1:9){
if(i*j>30){
bb<-T
break
}
cat(i,"*",j,"=",i*j,"\t")
}
cat("\n")
if(bb) #bb가 TRUE이면
break
}
for(j in 1:9){
if(i*j>30){
bb<-T
break
}
cat(i,"*",j,"=",i*j,"\t")
}
for(i in 1:9){
for(j in 1:9){
if(i*j>30){
bb<-T
break
}
cat(i,"*",j,"=",i*j,"\t")
}
cat("\n")
if(bb) #bb가 TRUE이면
break
}
#switch 문
month <- sample(1:12,1)
month <- print(paste(month,"월",sep=""))
result <- switch(EXPR=month,
"12월"=,"1월"=,"2월"="겨울",
"3월"=,"4월"=,"5월"="봄",
"6월"=,"7"=,"8월"="여름",
"가을")
cat(month,"는 ",result,"입니다","\n",sep="")
cat(month,"는 ",result,"입니다","\n",sep="")
#switch 문
month <- sample(1:12,1)
cat(month,"는 ",result,"입니다","\n",sep="")
#switch 문
month <- sample(1:12,1)
month <- print(paste(month,"월",sep=""))
month <- print(paste(month,"월",sep=""))
result <- switch(EXPR=month,
"12월"=,"1월"=,"2월"="겨울",
"3월"=,"4월"=,"5월"="봄",
"6월"=,"7"=,"8월"="여름",
"가을")
#switch 문
month <- sample(1:12,1)
month <- print(paste(month,"월",sep=""))
cat(month,"는 ",result,"입니다","\n",sep="")
cat(month,"은 ",result,"입니다","\n",sep="")
num <- sample(1:10,1)
num
switch(EXPR = num,"A","B","C","D")
num
num <- sample(1:10,1)
switch(EXPR = num,"A","B","C","D")
num <- sample(1:10,1)
num
switch(EXPR = num,"A","B","C","D")
for(num in 1:10){
cat(num,":",switch(EXPR = num,"A","B","C","D"),"\n")
}
for(num in 1:10){
num<-paste(num,"",sep = "")
cat(num,":",switch(EXPR = num,"7"="A","8"="B","9"="C","10"="D"),"\n")
}
for(num in 1:10){
num<-paste(num,"",sep = "")
cat(num,":",switch(EXPR = num,7="A","8"="B","9"="C","10"="D"),"\n")
}
for(num in 1:10){
num<-paste(num,"",sep = "")
cat(num,":",switch(EXPR = num,"7"="A","8"="B","9"="C","10"="D"),"\n")
}
num
for(num in 1:10){
num<-paste(num,"",sep = "")
cat(num,":",switch(EXPR = num,"7"="A","8"="B","9"="C","10"="D","ㅋ"),"\n")
}
#num<-paste(num,"",sep = "")
num<-as.character(num)
for(num in 1:10){
#num<-paste(num,"",sep = "")
num<-as.character(num)
cat(num,":",switch(EXPR = num,"7"="A","8"="B","9"="C","10"="D","ㅋ"),"\n")
}
#num<-paste(num,"",sep = "")
#num<-as.character(num)
num<-paste(num,"")
num
for(num in 1:10){
#num<-paste(num,"",sep = "")
#num<-as.character(num)
num<-paste(num,"")
cat(num,":",switch(EXPR = num,"7"="A","8"="B","9"="C","10"="D","ㅋ"),"\n")
}
#문제26
L1<-list(
name = "scott",
sal= 3000
)
L1
#read file data
nums <- scan("sample_num.txt")
nums
word_ansi <- scan("sample_ansi.txt",what="")
word_ansi
words_utf8 <- scan("sample_utf8.txt", what="",encoding="UTF-8")
words_utf8
lines_ansi <- readLines("sample_ansi.txt")
lines_ansi
lines_utf8 <- readLines("sample_utf8.txt",encoding="UTF-8")
lines_utf8
lines_ansi
df2 <- read.table("product_click.log")
df2
str(df2)
#제어문
#if else
randomNum <-sample(1:10,1)
head(df2)
str(df2)
summary(df2$V2)
